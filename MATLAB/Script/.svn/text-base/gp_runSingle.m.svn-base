%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function gp_runSingle(probID, ew, useDMPerm, methodID)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Make sure we're running the latest GP.
make_gp ;

A = [] ;
memoryException = 0 ;
dosq = 0 ;

try
    memoryException = 0 ;
    probID ;
    Prob = UFget(probID) ;
    A = Prob.A ;
 
    % Condition the edge weights based on whether we want to consider them.
    if ew == 0
        A = spones(A) ;
    else
        A = abs(A) ;
    end

catch exception
    memoryException = 1 ;
    gp_log('Error: Out of Memory when preconditioning graph for experiment.\n') ;
end

try
    if size(A,1) == size(A,2)
        sqA = 0.5 * (A + A') ;
        A = sqA ;
        dosq = 1 ;
    end
catch exception
    gp_log('Error: Out of Memory when forming square symmetric graph.\n') ;
end

if dosq
    % Cut the largest component using the Davis method:
    if useDMPerm
        try
            A = A + speye(size(A)) ;
            [p,q,r,s] = dmperm(A) ;
            A = A(p,q) ;
            [~, g] = max(diff(r)) ;
            st = r(g) ;
            en = r(g+1)-1 ;
            A = A(st:en, st:en) ;
        catch
            dosq = 0 ;
            gp_log('Error: Out of Memory when selecting largest component for experiment.\n') ;
        end
    end

    for mid=methodID
        % Get User Parameters & print details.
        UserParams = gp_generateUserParams(mid, gp_getConfig()) ;

        % Do the cut.    
        if(mid ~= 1)
            gp_showCut(A, ew, UserParams) ;
        else
            metis_showCut(A, ew) ;
        end

        fprintf('Press any key to continue...\n');
        pause ;
    end
end

